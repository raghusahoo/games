#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#include<graphics.h>

//Global variables
int gameover=0,j,k,a,b,aa=0,bb=0,yy=0,cc=0,dd=0,sem5=0,x,sem6=0,temi=0,temii=0,temmi=0;

//coordinates or initial position of all the pawns
   int err[16]={00,10,20,30,40,50,60,70,01,11,21,31,41,51,61,71};
   int frr[16]={07,17,27,37,47,57,67,77,06,16,26,36,46,56,66,76};

   int raghu=0,sahoo=0,raghu1=0,sahoo1=0,tem=0;
   char xx[20]; char zz[20];

//array to store x&y coordinates of final& initial inputs of minister
   int arr[100],ar[100],ai[100],arrr[100];

//array to store x&y coordinates of final& initial inputs of boat
   int rr[10],ss[100],ww[100],vv[100],nnn,nn,rrr[100],vvv[100],sss[100],www[100];

//array to store x&y coordinates of final& initial inputs of horse
   int bbb=0,bi[100],br[100],brr[100],brrr[100];

////array to store x&y coordinates of final& initial inputs of elephant
   int cbb=0,ci[100],cr[100],crr[100],crrr[100];

////array to store x&y coordinates of final& initial inputs of king
   int dbb=0,di[100],dr[100],drr[100],drrr[100];


//to check 'L' movement of horse
   int ck(int err[100],int raghu1,int raghu,int sahoo1,int sahoo){
        int count=0,i;
        for(i=0;i<16;i++){
           if(((raghu1>sahoo1?raghu1:sahoo1)-(raghu1>sahoo?sahoo1:raghu1))==2){
              if(err[i]%10==sahoo&&(((raghu1+sahoo1)%2==0)||
               (((raghu1>err[i]/10?raghu1:err[i]/10)-(raghu1>err[i]/10?err[i]/10:raghu1))==2))){
                 count=1;
              }
           }
           else{
              if(err[i]/10==sahoo1&&(((raghu+sahoo)%2==0)||
                (((raghu>err[i]%10?raghu:err[i]%10)-(raghu>err[i]%10?err[i]%10:raghu))==2))){
                 count=1;
               }
            }
          }
    return count;
    }

//checking one step forward movement
    int ckk(int arr[100],int raghu1,int raghu,int sahoo1,int sahoo){
         int i,count=0;
         for(i=0;i<16;i++){
            if(raghu1==sahoo1){
               if(arr[i]/10==raghu1){
                  if((arr[i]%10>raghu&&sahoo>arr[i]%10)||(arr[i]%10<raghu&&sahoo<arr[i]%10)){
                     count=1;
                   }
                }
              }
            else if(raghu==sahoo){
               if(arr[i]%10==raghu){
                  if((arr[i]/10<raghu1&&sahoo1<arr[i]/10)||(arr[i]/10>raghu1&&sahoo1>arr[i]/10)){
                     count=1;
                   }
                 }
            }
          }
     return count;
     }

//checking one step movement
     int chhk(int arr[100],int raghu1,int raghu,int sahoo1,int sahoo){
          int count=0,i;
          for(i=0;i<16;i++){
             if((((raghu1>arr[i]/10?raghu1:arr[i]/10)-(raghu1<arr[i]/10?raghu1:arr[i]/10))==
                ((raghu>arr[i]%10?raghu:arr[i]/10)-(raghu<arr[i]/10?raghu:arr[i]%10)))&&
                (((sahoo1>arr[i]/10?sahoo1:arr[i]/10)-(sahoo1<arr[i]/10?sahoo1:arr[i]/10))==
                ((sahoo>arr[i]%10?sahoo:arr[i]/10)-(sahoo<arr[i]/10?sahoo:arr[i]%10)))&&
                  (arr[i]!=b&&arr[i]!=a)){
                  count=1;
            }
          }
       return count;
       }

//checking diagonal movement of elephants
     int chk(int a,int b,int arr[16]){
       int coo=1,tr=0;
       for(j=0;j<16;j++){
           if(arr[j]==a){
             tr=1;
             for(k=0;k<16;k++){
                 if(arr[k]==b)coo=0;}
                    if(coo!=0){
                       arr[j]=b;
                       break;
                     }
                  }
               }
           if(tr==0)return tr;
           else return coo;
      }

//checking verticle & horizontal movement of pawns
     int check(int a,int b,int arr[16]){
         int i,coo=0;
         for(i=0;i<16;i++){
          if(arr[i]/10==a&&arr[i]%10==b){coo=1;break;}}
      return coo;
     }


//taking user details
void input(){
      printf("enter your name:");
      gets(xx);
      printf("enter your opponent name:");
     gets(zz);
}

//drawing the front end of the chess
void setup(){
     clrscr();

//predefine syntax
     int count=0,i,temp=0;
     int gd=DETECT,gm;
     initgraph(&gd,&gm,"c:\\turboC3\\bgi");

//boundary color
     setcolor(BROWN);

//boundary of the chess board
   //verticle boundary
     line(0,0,0,400);
     line(600,0,600,400);
   
   //horizontal boundary
     line(0,0,600,0);
     line(0,400,600,400);

//drawing the chess board
   while(count!=8){
     if(count%2!=0){
        for(i=0;i<7;i=i+2){
            bar(0+75*i,0+count*50,75+75*i,50+count*50);
         }
      }
     else{
         for(i=1;i<9;i=i+2){
             bar(0+75*i,0+count*50,75+75*i,50+count*50);
         }
      }
    count++;
}


//for king
   temp=0;
//checking if the choosen is this & changing the coordinate
  for(i=0;i<400;i=i+450){
    for(j=0;j<400;j=j+350){

//checking if the selected one is king
        for(k=0;k<cbb;k++){
            if(i==ci[k]*75&&j==crrr[k]*50){
              sem6=j;sem5=i;count=0;
              if(x!=6&&temmi==1){
                 if(temi==crr[k]&&temmi==cr[k]){
                   crr[k]=8*75;cr[k]=8*50;
                   i=crr[k];j=cr[k];
                 }
              }
            else{
               i=crr[k]*75;j=cr[k]*50;
              }
            }
         }
     if(temp%2==0)setcolor(BROWN);
     else setcolor(GREEN);

//drawing the images of king
    line(260+i,5+j,240+i,40+j);
    line(260+i,5+j,280+i,40+j);
    line(240+i,40+j,280+i,40+j);
    if(count==0){
       i=sem5;j=sem6;count=1;
      }
      temp++;
    }
}


//for queen
temp=0;
for(i=0;i<400;i=i+450){
    for(j=0;j<400;j=j+350){

//checking if the selected one is queen
        for(k=0;k<dbb;k++){
           if(i==di[k]*75&&j==drrr[k]*50){
              sem6=j;sem5=i;count=0;
              if(x!=5&&temmi==1){
                if(temi==drr[k]&&temmi==dr[k]){
		   drr[k]=8*75;dr[k]=8*50;
		   i=drr[k];j=dr[k];
                  }
                }
               else{
                  i=drr[k]*75;j=dr[k]*50;
   	       }
             }   
           }
      if(temp%2==0)setcolor(BROWN);
      else setcolor(GREEN);

//drawing the images of queen
      circle(335+i,10+j,10);
      line(335+i,20+j,335+i,40+j);
      line(315+i,40+j,355+i,40+j);
      if(count==0){
        i=sem5;j=sem6;count=1;
      }
      temp++;
    }
 }


//for boat
  for(i=0;i<600;i=i+525){
   for(j=0;j<400;j=j+350){

//checking if the selected one is boat
      for(k=0;k<nn;k++){
         if(i==ww[k]*75&&j==vv[k]*50){
            sem6=j;sem5=i;count=0;
            if(x!=4&&temmi==1){
              if(temi==rr[k]&&temmi==ss[k]){
                rr[k]=8*75;ss[k]=8*50;
                i=rr[k];j=ss[k];
                }
              }
            else{
              i=rr[k]*75;j=ss[k]*50;
             }
          }
        }
     if(temp%2==0)setcolor(BROWN);
     else setcolor(GREEN);

//drawing images of boat
    circle(35+i,8+j,6);
    circle(35+i,41+j,6);
    line(29+i,14+j,29+i,35+j);
    line(41+i,14+j,41+i,35+j);
    if(count==0){
       i=sem5;j=sem6;count=1;
     }
    temp++;
    }
}


//for horse
temp=0;
for(i=0;i<500;i=i+375){
   for(j=0;j<400;j=j+350){

//checking if the selected one is horse
      for(k=0;k<nnn;k++){
         if(i==www[k]*75&&j==vvv[k]*50){
            sem6=j;sem5=i;count=0;
            if(x!=3&&temmi==1){
               if(temi==rrr[k]&&temmi==sss[k]){
                  rrr[k]=8*75;sss[k]=8*50;
                  i=rrr[k];j=sss[k];
                }
              }
             else{
             i=rrr[k]*75;j=sss[k]*50;
             }
           }
         }
        if(temp%2==0)setcolor(BROWN);
        else setcolor(GREEN);

//drawing the images of horse
circle(125+i,12+j,6);
    line(125+i,18+j,100+i,18+j);
    line(125+i,30+j,100+i,30+j);
    line(125+i,18+j,125+i,30+j);
    line(100+i,18+j,100+i,30+j);
    line(105+i,30+j,105+i,45+j);
    line(120+i,30+j,120+i,45+j);
   if(count==0){
      i=sem5;j=sem6;count=1;
    }
   temp++;}}


//for elephant
temp=0;
for(i=0;i<300;i=i+225){
    for(j=0;j<400;j=j+350){

//checking if the selected one is elephant
       for(k=0;k<bbb;k++){
          if(i==bi[k]*75&&j==brrr[k]*50){
             sem6=j;sem5=i;count=0;
             if(x!=4&&temmi==1){
                if(temi==brr[k]&&temmi==br[k]){
                   brr[k]=8*75;br[k]=8*50;
                   i=brr[k];j=br[k];
                 }
              }
        else{
             i=brr[k]*75;j=br[k]*50;
            }
         }    
       }
      if(temp%2==0)setcolor(BROWN);
      else setcolor(GREEN);

 //drawing the images of elephant
    circle(185+i,8+j,6);
    line(178+i,8+j,173+i,35+j);
    line(192+i,8+j,200+i,35+j);
    line(173+i,35+j,200+i,35+j);
    if(count==0){
       i=sem5;j=sem6;count=1;
     }
    temp++;
    }
}


//for ministers
for(i=0;i<=550;i=i+75){
   for(j=0;j<=300;j=j+250){

//checking if the selected one is ministers
      for(k=0;k<bb;k++){
         if(i==ai[k]*75&&j==arrr[k]*50){
            sem6=j;sem5=i;count=0;
            if(temmi==1){
               if((temi-1)==arr[k]&&(temmi-1)==ar[k]){
                  arr[k]=8*75;ar[k]=8*50;
                  i=arr[k];j=ar[k];
                }
              }
           else{
             i=arr[k]*75;j=ar[k]*50;
            }
          }   
        }
     if(temp%2==0)setcolor(BROWN);
     else setcolor(GREEN);

//drawing the images of ministers
    circle(35+i,65+j,6);
    line(30+i,65+j,25+i,80+j);
    line(40+i,65+j,45+i,80+j);
    line(25+i,80+j,45+i,80+j);
    if(count==0){
      i=sem5;j=sem6;count=1;
     }
    temp++;
     }
}
getch();
closegraph();
temi=0;temii=0;temmi=0;

//displaying the which user turn is
if(tem%2==0)printf("%s turns\n",xx);
else printf("%s turns\n",zz);

//displaying the choices
printf("name of your choices you have:\n");
printf("1:ministers\n2-boat\n3-horse\n4-elephant\n 5-queen\n 6-king\n");

//taking input and scanning
label30:
printf("enter the name of your choice:");
scanf("%d",&x); int t=0;

//switching to the respective pawns
switch(x){

      case 1:
      label1:

//initial coordinate
      printf("enter the coordinate of minister:");
      scanf("%d",&a);

//final coordinate
      printf("enter the new coordinate of minister:");
      scanf("%d",&b);

//seperating the x&y coordinate
      sahoo=b%10;sahoo1=b/10;
      raghu=a%10;raghu1=a/10;
      raghu--;sahoo--;

//checking where minister is present in selected block
      if(!(chk(a,b,tem%2==0?err:frr))){printf("already filled\ntry another move\n");
      goto label1;
      }

//checking movement validity of minister
      if((raghu1!=sahoo1)||(((sahoo>raghu?sahoo:raghu)-(sahoo>raghu?raghu:sahoo))!=1)){
      printf("invalid move\ntry another move\n");
      goto label1;
      }

      t=0;

//changing the selected position with the entered position of minister
      for(int yy=0;yy<bb;yy++){
         if(raghu1==arr[yy]&&raghu==ar[yy]){
            arr[yy]=sahoo1;ar[yy]=sahoo;
            t=1;
          }
        }
       if(t==0){
       ai[bb]=raghu1;arrr[bb]=raghu;bb++;
       arr[aa]=sahoo1;ar[aa]=sahoo;aa++;
     }
    break;


     case 2:
     label2:

//initial coordinate of boat
     printf("enter the coordinate of boat:");
     scanf("%d",&a);

//final coordinate of boat
     printf("enter the new coordinate of boat:");
     scanf("%d",&b);

//seperating x&y coordinate
    sahoo=b%10;sahoo1=b/10;
    raghu=a%10;raghu1=a/10;

//checking movement validity
    if(raghu1!=sahoo1&&raghu!=sahoo){
      printf("invalid move\ntry another move\n");
      goto label2;
     }

//checking movement validity
    if(check(sahoo1,sahoo,tem%2==0?frr:err)){
      temi=sahoo1;temii=sahoo;
      temmi=1;
    }

//checking presence of pawns
    if(temmi!=1){
       if(ckk(tem%2==0?err:frr,raghu1,raghu,sahoo1,sahoo)){
       printf("invalid move\n");
       goto label30;
       }
     }
    if(!chk(a,b,tem%2==0?err:frr)){
      printf("already filled\ntry another move\n");
      goto label2;
    }
    t=0;
    for(yy=0;yy<nn;yy++){
       if(raghu1==rr[yy]&&raghu==ss[yy]){
       rr[yy]=sahoo1;ss[yy]=sahoo;
       t=1;}
     }
    if(t==0){
      ww[nn]=raghu1;vv[nn]=raghu;
      rr[nn]=sahoo1;ss[nn]=sahoo;nn++;
    }
    break;


   case 3:
   label6:

//initial coordinate of horse
    printf("enter the coordinate of horse:");
    scanf("%d",&a);

//final coordinate of horse
    printf("enter the new coordinate of horse:");
    scanf("%d",&b);

//seperating x&y coordinate
    sahoo=b%10;sahoo1=b/10;
    raghu=a%10;raghu1=a/10;

//checking movement validity
    if(check(sahoo1,sahoo,tem%2==0?frr:err)){
       temi=sahoo1;temii=sahoo;
       temmi=1;
     }

//presence of horse pawns
    if(temmi!=1){
       if(!chk(a,b,tem%2==0?err:frr)){printf("already filled\ntry another move\n");
          goto label6;
        }
     }
    raghu1--;sahoo1--;

//movement validation
    if(check(sahoo1,sahoo,tem%2==0?err:frr)){
      temi=check(sahoo1,sahoo,tem%2==0?frr:err);
     }

//movement validation
     if((((raghu1>sahoo1?raghu1:sahoo1)-(raghu1>sahoo1?sahoo1:raghu1))+
     ((raghu>sahoo?raghu:sahoo)-(raghu>sahoo?sahoo:raghu))!=3)||(
         raghu1==sahoo1||raghu==sahoo)){
         printf("invalid move\ntry anothe move\n");
         goto label6;
      }

//checking for correct movement
     if(chhk(tem%2==0?err:frr,raghu1,raghu,sahoo1,sahoo)){
        printf("invalid move\n");
        goto label30;
     }
    t=0;
     for( yy=0;yy<nnn;yy++){
        if(raghu1==rrr[yy]&&raghu==sss[yy]){
        rrr[yy]=sahoo1;sss[yy]=sahoo;
        t=1;
        }
      }
     if(t==0){
        www[nnn]=raghu1;vvv[nnn]=raghu;
        rrr[nnn]=sahoo1;sss[nnn]=sahoo;nnn++;
     }
     break;


     case 4:
     label3:

//initial coordinate
     printf("enter the coordinate of elephant:");
     scanf("%d",&a);

//final coordinate
     printf("enter the new coordinate of elephant:");
     scanf("%d",&b);

//seperating x&y coordinate
     sahoo=b%10;sahoo1=b/10;
     raghu=a%10;raghu1=a/10;

//movement validation
     if(check(sahoo1,sahoo,tem%2==0?frr:err)){
        temi=sahoo1;temii=sahoo;
        temmi=1;
      }
      if(temmi!=1){
         if(!chk(a,b,tem%2==0?err:frr)){printf("already filled\ntry another move\n");
            goto label3;
         }
       }

//movement validation
       if(check(sahoo1,sahoo,tem%2==0?err:frr)){
          temi=check(sahoo1,sahoo,tem%2==0?frr:err);
       }

//correct movement validation
       if(((raghu1>sahoo1?raghu1:sahoo1)-(raghu1>sahoo1?sahoo1:raghu1))!=
           ((raghu>sahoo?raghu:sahoo)-(raghu>sahoo?sahoo:raghu))){
            printf("invalid move\ntry anothe move\n");
            gotolabel3;
        }

//movement validation
       if(chhk(tem%2==0?err:frr,raghu1,raghu,sahoo1,sahoo)){
          printf("invalid move\n");
          goto label30;
       }

      raghu1=raghu1-2;sahoo1=sahoo1-2;
       t=0;

//changing the position of the pawns
      for(yy=0;yy<bbb;yy++){
         if(raghu1==brr[yy]&&raghu==br[yy]){
         brr[yy]=sahoo1;br[yy]=sahoo;
         t=1;
         }
       }
      if(t==0){
         bi[bbb]=raghu1;brrr[bbb]=raghu;
         brr[bbb]=sahoo1;br[bbb]=sahoo;bbb++;
       }
     break;


     case 5:
     label12:

//initial coordinate
     printf("enter the coordinate of queen:");
     scanf("%d",&a);

//final coordinate
     printf("enter the new coordinate of queen:");
     scanf("%d",&b);

//seperating x&y coordinate
     sahoo=b%10;sahoo1=b/10;
     raghu=a%10;raghu1=a/10;

//movement validation
     if(check(sahoo1,sahoo,tem%2==0?frr:err)){
       temi=sahoo1;temii=sahoo;
       temmi=1;
      }
     if(temmi!=1){
        if(!chk(a,b,tem%2==0?err:frr)){
           printf("already filled\ntry another move\n");
           goto label12;
         }

//movement validation
          t=0;
      if(((raghu1!=sahoo1)&&(raghu!=sahoo))&&(((raghu1>sahoo1?raghu1:sahoo1)-(raghu1>sahoo1?sahoo1:raghu1))!=
         ((raghu>sahoo?raghu:sahoo)-(raghu>sahoo?sahoo:raghu)))){
         printf("invalid move\ntry anothe move\n");
         goto label12;
       }

//correct movement 
      if((raghu1==sahoo1)||(raghu==sahoo)){
          if(ckk(tem%2==0?err:frr,raghu1,raghu,sahoo1,sahoo)){
             printf("invalid move\n");
             goto label30;
           }
        }
      else{
          if(chhk(tem%2==0?err:frr,raghu1,raghu,sahoo1,sahoo)){
              printf("invalid move\n");
              goto label30;
           }
       }
       raghu1=raghu1-4;sahoo1=sahoo1-4;
       t=0;
       for(yy=0;yy<dbb;yy++){
          if(raghu1==drr[yy]&&raghu==dr[yy]){
          drr[yy]=sahoo1;dr[yy]=sahoo;
          t=1;
          }
        }
       if(t==0){
         di[dbb]=raghu1;drrr[dbb]=raghu;
         drr[dbb]=sahoo1;dr[dbb]=sahoo;dbb++;
       }
       break;


      case 6:
      label15:

//initial coordinate
      printf("enter the coordinate of king:");
      scanf("%d",&a);

//final coordinate
      printf("enter the new coordinate of king:");
      scanf("%d",&b);

//seperating x&y coordinate
      sahoo=b%10;sahoo1=b/10;
      raghu=a%10;raghu1=a/10;

//movement validation
     if(check(sahoo1,sahoo,tem%2==0?frr:err)){
        temi=sahoo1;temii=sahoo;
         temmi=1;}

     if(temmi!=1){
        if(!chk(a,b,tem%2==0?err:frr)){printf("already filled\ntry another move\n");
           goto label15;
          }
       }
       raghu1=raghu1-3;sahoo1=sahoo1-3;

//movement validation
       if(check(sahoo1,sahoo,tem%2==0?frr:err)){
          temi=check(sahoo1,sahoo,tem%2==0?frr:err);
        }

//movement validation
       t=0;
       if((((raghu1>sahoo1?raghu1:sahoo1)-(raghu1>sahoo1?sahoo1:raghu1))+
         ((raghu>sahoo?raghu:sahoo)-(raghu>sahoo?sahoo:raghu)))>2){
            printf("invalid move\ntry anothe move\n");
            goto label15;
        }
       t=0;

//changing the position of pawns
       for(int yy=0;yy<cbb;yy++){
           if(raghu1==crr[yy]&&raghu==cr[yy]){
            crr[yy]=sahoo1;cr[yy]=sahoo;
            t=1;
           }
         }
       if(t==0){
          ci[cbb]=raghu1;crrr[cbb]=raghu;
          crr[cbb]=sahoo1;cr[cbb]=sahoo;cbb++;}
      break;

//default case
  default:
  break;
 }

//command for gameover
  if(x==0)gameover=1;
  }
}

//calling functions
int main(){
clrscr();
input();
while(!gameover){
setup();
tem++;}
getch();}

















